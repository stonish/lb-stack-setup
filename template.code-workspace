{
    "extensions": {
        "recommendations": [
            "eamodio.gitlens",
            "ms-python.python",
            "ms-python.vscode-pylance",
            "ms-vscode.cpptools",
            "ms-vsliveshare.vsliveshare",
            "twxs.cmake",
            "lextudio.restructuredtext",
            "davidanson.vscode-markdownlint",
            "streetsidesoftware.code-spell-checker"
        ]
    },
    "folders": [
        {
            "path": "utils"
        }
    ],
    "settings": {
        "C_Cpp.clang_format_fallbackStyle": "none",
        "C_Cpp.clang_format_path": "/cvmfs/lhcb.cern.ch/lib/bin/x86_64-centos7/lcg-clang-format-8.0.0",
        "C_Cpp.clang_format_style": "file",
        "C_Cpp.configurationWarnings": "Disabled",
        "C_Cpp.default.cStandard": "c11",
        // compileCommands is set per folder (.vscode/c_cpp_properties.json)
        "C_Cpp.default.compileCommands": "",
        "C_Cpp.default.compilerPath": "$compilerPath",
        "C_Cpp.default.cppStandard": "c++17",
        "C_Cpp.default.defines": [],
        // includePath is set per folder
        "C_Cpp.default.includePath": [],
        "C_Cpp.default.intelliSenseMode": "$compilerType",
        "cSpell.dictionaryDefinitions": [
            {
                "name": "lhcb",
                "path": "{utilsPath}/dictionary.txt"
            }
        ],
        "cSpell.diagnosticLevel": "Hint",
        // List of dictionaries to use when checking files.
        "cSpell.dictionaries": [
            "lhcb"
        ],
        "cSpell.includeRegExpList": [
            "string",
            "(\"\"\"|''')[^\\1]*\\1",
            "CStyleComment",
            "#.*"
        ],
        "cSpell.language": "en,en-GB",
        "cSpell.showStatus": false,
        "files.associations": {
            "*.C": "cpp",
            "*.icpp": "cpp"
        },
        "files.trimTrailingWhitespace": true,
        // python.envFile is set per folder (.vscode/settings.json)
        "python.formatting.provider": "yapf",
        "python.formatting.yapfPath": "$outputPath/yapf",
        "python.languageServer": "Pylance",
        "python.linting.enabled": true,
        "python.linting.flake8Args": [
            "--select=F,E71,E9,W1,W6"
        ],
        "python.linting.flake8Enabled": true,
        "python.linting.flake8Path": "$outputPath/flake8",
        "python.linting.pylintEnabled": false,
        "python.pythonPath": "$pythonPath",
        "restructuredtext.confPath": " ${workspaceFolder}/doc/conf.py",
        "restructuredtext.languageServer.disabled": true,
        "restructuredtext.linter.run": "off",
        "restructuredtext.sphinxBuildPath": "$lbenvPath/bin/sphinx-build",
        "telemetry.enableCrashReporter": false,
        "telemetry.enableTelemetry": false,
        "window.title": "${dirty}${activeEditorShort}${separator}${rootPath}"
    },
    "launch": {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "GDB: gaudirun.py",
                "type": "cppdbg",
                "request": "launch",
                "program": "$pythonPath",
                "args": [
                    "${workspaceFolder:Gaudi}/Gaudi/scripts/gaudirun.py",
                    "${file}"
                ],
                // TODO CWD needs to be magically set to the qmtest directory to emulate
                // what happens when running qmt tests.
                "cwd": "$projectPath",
                "externalConsole": false,
                "MIMode": "gdb",
                "miDebuggerPath": "${fileWorkspaceFolder}/gdb",
                "miDebuggerArgs": "-ix ${workspaceFolder:utils}/gdbinit",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ]
            },
            {
                "name": "GDB: attach",
                "type": "cppdbg",
                "request": "attach",
                "program": "$pythonPath",
                "processId": "${command:pickProcess}",
                "MIMode": "gdb",
                // When attaching, we can make do with any gdb (but we still
                // need some minimal environment).
                "miDebuggerPath": "${workspaceFolder:Gaudi}/gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ]
            }
        ]
    }
}