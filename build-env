#!/bin/bash
set -eo pipefail
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source "$DIR/helpers.sh"
logname="build-env"
eval $(config --sh outputPath binaryTag useDocker useDistcc lbenvPath)
OUTPUT="$outputPath"
BINARY_TAG="$binaryTag"
USE_DOCKER="$useDocker"
USE_DISTCC="$useDistcc"
setup_output

USE_KERBEROS=true
if [ "$1" = "--no-kerberos" ]; then
    shift
    USE_KERBEROS=false
elif [ "$USE_DISTCC" != true ]; then
    USE_KERBEROS=false
fi

if [ "$USE_DOCKER" != true ]; then
    HOST_OS=$(/cvmfs/lhcb.cern.ch/lib/bin/host_os)
    if [ "$HOST_OS" != x86_64-centos7 ]; then
        log ERROR "Host OS $HOST_OS is not supported. Find a CentOS 7 machine"
        log ERROR "or use docker by setting \"useDocker\" to true in ${DIR}/config.json"
        exit 1
    fi
elif [ "$USE_KERBEROS" = true ]; then
    # If using docker, we should obtain a tgt in a FILE: cache
    # TODO is there a way to forward a tgt from types other than FILE, e.g KCM?
    export KRB5CCNAME=$(klist 2>/dev/null | head -1 | grep -o 'FILE:.*')
    if [ -z "$KRB5CCNAME" ]; then
        log ERROR "No kerberos ticket cache of the form 'FILE:path/to/file' was found."
        log ERROR "Please do this to forward a kerberos ticket to the conainer:"
        log ERROR
        log ERROR "    export KRB5CCNAME='FILE:/tmp/krb5cc_$(id -u)'; kinit -r 7d <username>@CERN.CH"
        log ERROR
        exit 1
    fi
fi

if [ "$USE_KERBEROS" = true ]; then
    # Check for a valid ticket
    if ! klist -s; then
        log ERROR "No valid ticket found. Please get a new one with"
        log ERROR
        log ERROR "    kinit -r 7d <username>@CERN.CH"
        log ERROR
        exit 1
    fi
    # Try to renew ticket every 30 min
    if [ -z "$(find "$OUTPUT/krb_renewal.timestamp" -mmin -30 2>/dev/null)" ]; then
        touch "$OUTPUT/krb_renewal.timestamp"
        kinit -R 2>/dev/null || true  # if this fails, the ticket is not renewable
    fi
fi

if [ "$USE_DOCKER" = true ]; then
    ( cd "${DIR}"; python3 -c 'import setup; setup.assert_cvmfs()' )
    args=(
        --docker-tag v4.57.py3
        --docker-prefix=gitlab-registry.cern.ch/rmatev/lb-stack-setup
        --quiet-env --lbenv -c ${BINARY_TAG}
        -C "${DIR}/.." --use-absolute-path
        --workdir "$PWD"
    )
    test "$USE_KERBEROS" != true || args+=(--kerberos)
    test -z ${MAKEFLAGS+x} || args+=(-e "MAKEFLAGS=${MAKEFLAGS}")
    "${DIR}/lb-docker-run" "${args[@]}" ${LB_DOCKER_RUN_FLAGS} "$@"
    # TODO lbenvPath is not respected in the docker case
else
    # Start a clean LbEnv a la lb-docker-run
    args=(
        "HOSTNAME=${HOSTNAME}"
        "HOME=${HOME}"
        "USER=${USER}"
        "TERM=${TERM}"
        "BINARY_TAG=${BINARY_TAG}"
        )
    test -z ${KRB5CCNAME+x} || args+=("KRB5CCNAME=${KRB5CCNAME}")
    test -z ${TMPDIR+x} || args+=("TMPDIR=${TMPDIR}")
    test -z ${XDG_RUNTIME_DIR+x} || args+=("XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR}")
    test -z ${MAKEFLAGS+x} || args+=("MAKEFLAGS=${MAKEFLAGS}")
    PYTHON_EXECUTABLE=$(command -v python3)
    if [ $PYTHON_EXECUTABLE != "/usr/bin/python3" ]; then
        args+=("PATH=/usr/local/bin:/usr/bin:${PYTHON_EXECUTABLE%/*}")
    fi

    args_hash=$(cksum <<<"${args[@]}")
    cache="${OUTPUT}/lbenv-cache-${args_hash// /_}.sh"
    if [[ !( -f "$cache" ) || \
          ( "${DIR}/config.json" -nt "$cache" ) || \
          ( "${DIR}/default-config.json" -nt "$cache" ) || \
          ( "${DIR}/native-env.sh" -nt "$cache" ) || \
          ( "${DIR}/build-env" -nt "$cache" ) ]]; then
        if ! env -i "${args[@]}" bash "${DIR}/native-env.sh" "$lbenvPath"/bin/LbEnv.sh > "$cache"; then
            log ERROR "Check 'lbenvPath' configuration setting"
            rm -f "$cache"
            exit 1
        fi
    fi
    env -i bash -c ". '$cache'; \"\$@\"" bash "$@"
fi
